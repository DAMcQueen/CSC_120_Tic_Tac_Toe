# -*- coding: utf-8 -*-
"""tictactoe.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r4PmlTYokcw2fEYyMEdsMi4mOTh_gG8p
"""

#creating tic tac toe board display

theBoard = ["-", "-", "-",
        "-", "-", "-",
        "-", "-", "-"]

#assigning current player as X on the board
currentPlayer = "X"

#establishing the basis for the game loop
gamePlaying = True

#board functionality
def print_board(theBoard):
    print(theBoard[0] + " | " + theBoard[1] + " | " + theBoard[2])
    print("---------")
    print(theBoard[3] + " | " + theBoard[4] + " | " + theBoard[5])
    print("---------")
    print(theBoard[6] + " | " + theBoard[7] + " | " + theBoard[8])
print_board(theBoard)


#player functionality

def playerInput(theBoard):
  turn = (int(input("Enter a number 1-9: ")))
  if turn >= 1 and turn <= 9 and theBoard[turn-1] == "-":
    theBoard[turn-1] = currentPlayer
  else:
    print("Choose another spot this one is not available")

#functionality for win, lose or draw across, down or diagonal
def checkAcross(theBoard):
    global winner
    if theBoard[0] == theBoard[1] == theBoard[2] and theBoard[0] != "-":
        winner = theBoard[0]
        return True
    elif theBoard[3] == theBoard[4] == theBoard[5] and theBoard[3] != "-":
        winner = theBoard[3]
        return True
    elif theBoard[6] == theBoard[7] == theBoard[8] and theBoard[6] != "-":
        winner = theBoard[6]
        return True

def checkDown(theBoard):
    global winner
    if theBoard[0] == theBoard[3] == theBoard[6] and theBoard[0] != "-":
        winner = theBoard[0]
        return True
    elif theBoard[1] == theBoard[4] == theBoard[7] and theBoard[1] != "-":
        winner = theBoard[1]
        return True
    elif theBoard[2] == theBoard[5] == theBoard[8] and theBoard[2] != "-":
        winner = theBoard[3]
        return True


def checkDiagonal(theBoard):
    global winner
    if theBoard[0] == theBoard[4] == theBoard[8] and theBoard[0] != "-":
        winner = theBoard[0]
        return True
    elif theBoard[2] == theBoard[4] == theBoard[6] and theBoard[4] != "-":
        winner = theBoard[2]
        return True


while gamePlaying:
  print_board(theBoard)
  playerInput(theBoard)